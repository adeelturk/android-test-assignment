apply plugin: 'jacoco'

ext {
    fileFilter = [
            // UI
            '**/*Fragment*.*',
            '**/*Activity*.*',
            // model classes
            '**/model/*.*',
            // BindingUtils file containing layout bindings
            '**/BindingUtils.kt',
            // data binding
            '**/databinding/**',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*'
    ]
}

def getSourceSetsDir = { productFlavorName ->
    def sourceSetsDir = "main"
    return sourceSetsDir
}

project.afterEvaluate {

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    // Grab all product flavors
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        def sourceName = "${productFlavorName}Debug"

        def testTaskName = "test${sourceName.capitalize()}UnitTest"

        // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
        // example coverage task of form 'testIlaDebugCoverage' depending on 'testIlaDebugUnitTest'
        task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: [
                "$testTaskName"
        ]) {
            group = "Reporting"
            description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

            reports {
                csv.enabled false
                xml.enabled true
                html.enabled true
            }

            def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}", excludes: fileFilter)
            classDirectories.from = files([kotlinTree])

            def sourceSetsDir = getSourceSetsDir(productFlavorName)

            def coverageSourceDirs = ["src/main/java",
                                      "src/Debug/java",
                                      "src/${productFlavorName}/java",
                                      "src/${sourceSetsDir}/java"]

            sourceDirectories.setFrom(files(coverageSourceDirs))
            additionalSourceDirs.setFrom(files(coverageSourceDirs))

            executionData.from = files(["${buildDir}/jacoco/test${sourceName.capitalize()}UnitTest.exec"])
        }
    }
}